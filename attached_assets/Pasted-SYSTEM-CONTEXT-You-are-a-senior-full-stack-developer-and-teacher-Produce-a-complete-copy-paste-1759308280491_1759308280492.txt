SYSTEM / CONTEXT:
You are a senior full-stack developer and teacher. Produce a complete, copy-pasteable, ready-to-run project implementing a "Personal Health Tracker" app. 

BACKEND:
- Must use **Java Spring Boot** (REST API).
- Must include full file structure: controller, service, repository, model, application entrypoint.
- Must use SQLite database (`healthtracker.db`) with migrations for sample data.
- Must provide Dockerfile + docker-compose.yml.
- Must implement endpoints for: 
  - GET /api/entries?days=14
  - GET /api/entry/{date}
  - POST /api/entry
  - GET /api/summary
  - GET /api/predict?days=3
  - GET /api/leaderboard
  - POST /api/friends
  - GET /api/friends-activity
  - PUT /api/targets
  - GET /api/monthly-report
  - POST /api/auth/register
  - POST /api/auth/login
- Must implement ML: simple linear regression + z-score anomaly detection.
- Must implement AI suggestions logic (diet/steps improvement).

FRONTEND (primary):
- Must use **vanilla HTML, CSS, JS** (no React required as primary).
- Include clean, modern, responsive UI.
- Dashboard layout with sidebar (Dashboard, Steps, Calories, History, Friends/Leaderboard, Reports, Settings).
- Each section in a **card UI** with padding, shadow, rounded corners.
- Buttons must be consistent, modern, hover effects, and clearly labeled (`Save Steps`, `Add Meal`, `Add Friend`, `Update Targets`, `Generate Report`).
- Use **Chart.js** for all charts.
- All forms must have validation (steps ≥ 0, calories ≥ 0, required fields not empty).
- After saving steps/meals, the dashboard and charts **must update immediately**.
- After adding friends, the leaderboard/friends section **must update immediately**.
- Monthly report must display charts + AI recommendation cards, and include a **Download Report (PDF/CSV)** button.
- Notifications: show success/error toasts for each action.

USER FEATURES:
1. **Step Tracker** – manually enter daily steps; view daily + weekly charts.
2. **Calorie Tracker** – add meals with calories; see total daily calories.
3. **Daily Summary & AI Recommendations** – personalized backend suggestions.
4. **Trend Analysis & Predictions** – next 3–7 days forecast with linear regression.
5. **Anomaly Detection** – spikes/drops in steps/calories highlighted in red.
6. **Friends & Leaderboard** – search/add friends; leaderboard ranked by daily/weekly/monthly activity; streak system updates with daily steps.
7. **Goals/Targets** – set daily/weekly step & calorie goals with progress bars.
8. **Smart Reminders** – if targets not met, show reminder toast/banner.
9. **Monthly Report with AI Suggestions** – generate detailed summary + suggestions.
10. **Charts Everywhere** – steps, calories, predictions, leaderboard.

EXTRAS:
- Include sample data for testing.
- Provide Postman collection or curl commands.
- Include README with step-by-step setup (local + deployment to Render/Vercel).
- Include full file structure for backend and frontend.
- Optional React version under `/frontend-react`, but **primary must be vanilla JS**.

CRITICAL REQUIREMENTS:
- Use **Spring Boot for backend** (explicit, not plain Java).
- All buttons in frontend must work and connect to backend APIs — no placeholders.
- Ensure clean UI: sidebar + cards, consistent styling, responsive layout.
- After each action (save steps, add meal, update targets, add friend), frontend updates immediately.
- Show clear success/error messages (toast).
- No broken buttons, no dummy UI.
- Provide everything in one complete, copy-pasteable package.
